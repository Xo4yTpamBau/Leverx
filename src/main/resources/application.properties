#DATABASE
#========
spring.datasource.url=jdbc:postgresql://localhost:5432/leverx
spring.datasource.username=postgres
spring.datasource.password=root

#spring.redis.url=redis://:p7d53a175d7a40af96bdb90c0f030b7795e9d21a9ac9d718187c2414016d34eb3@ec2-18-203-55-62.eu-west-1.compute.amazonaws.com:26990
#spring.redis.host=ec2-18-203-55-62.eu-west-1.compute.amazonaws.com
#spring.redis.port=26990
#spring.redis.password=p7d53a175d7a40af96bdb90c0f030b7795e9d21a9ac9d718187c2414016d34eb3
#spring.redis.timeout=60000
#
#spring.datasource.url= jdbc:postgres://obsrdqlosyudfr:9be4ed58aa3088c0980ba1f9ab3204cd49ace7c0c4d5b7a1ff36d1ce0a104def@ec2-3-248-103-75.eu-west-1.compute.amazonaws.com:5432/d2dpd209hu44dt
#spring.datasource.username=obsrdqlosyudfr
#spring.datasource.password=9be4ed58aa3088c0980ba1f9ab3204cd49ace7c0c4d5b7a1ff36d1ce0a104def

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database=postgresql
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL10Dialect
#============
#MAIL
#============
spring.mail.host=smtp.yandex.ru
spring.mail.port=465
spring.mail.username=sprectmail@yandex.ru
spring.mail.password=183729465
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
#============
#JWT
#============
jwt.accessToken.expired=600000
jwt.refreshToken.expired=86400000
#==========
#AWSS3
#==========
cloud.aws.region.static=eu-central-1
cloud.aws.stack.auto = false
aws.accessKey=AKIAVQYV5XEEXOK642U5
aws.secretKey=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
#==========
#FILE
#==========
spring.servlet.multipart.enabled=true
spring.servlet.multipart.file-size-threshold=2KB
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=215MB
#===========
#DESCRIPTION
#===========
application-description=This is a training project that includes: \
  Registration, with the user saved in the database (PostgreSQL); \
  Authorization using Spring Security;\
  The basic operations for working with the user profile are implemented; \
  Support for a session using access and refresh tokens, for each of which an individual private key is generated, when working with the token, it gets blacklisted; \
  Sending emails to confirm mail or password resets; \
  NoSQL(REDIS) is used to store private keys, track authentication attempts; \
  Documentation is conducted using SpringDoc and swagger ui; \
  The project is covered by unit and integration tests; \
  It is possible to add and remove an avatar (images are stored on s3);
application-version=0.9
#==========
spring.main.allow-bean-definition-overriding=true